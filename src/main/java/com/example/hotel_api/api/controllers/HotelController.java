package com.example.hotel_api.api.controllers;

import com.example.hotel_api.api.dto.HotelBriefDto;
import com.example.hotel_api.api.dto.HotelCreateRequestDto;
import com.example.hotel_api.api.dto.HotelDetailsDto;
import com.example.hotel_api.service.HotelService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/property-view")
@RequiredArgsConstructor
@Tag(name = "Hotel Management", description = "Operations with hotel information")
public class HotelController {
    private final HotelService hotelService;

    @Operation(summary = "Get a list of all hotels",
            description = "Returns a summary of all available hotels.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully received the list of hotels",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(type = "array", implementation = HotelBriefDto.class))),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/hotels")
    public ResponseEntity<List<HotelBriefDto>> getAllHotels() {
        List<HotelBriefDto> hotels = hotelService.getAllHotelsBrief();
        return ResponseEntity.ok(hotels);
    }

    @Operation(summary = "Get detailed hotel information by ID",
            description = "Receives full details of the hotel including address, contacts and facilities.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully obtained the details of the hotel",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = HotelDetailsDto.class))),
            @ApiResponse(responseCode = "404", description = "Hotel with the specified ID was not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/hotels/{id}")
    public ResponseEntity<HotelDetailsDto> getHotelById(@PathVariable Long id) {
        HotelDetailsDto hotel = hotelService.getHotelDetailsById(id);
        return ResponseEntity.ok(hotel);
    }

    @Operation(summary = "Hotel Search",
            description = "Allows you to search for hotels by various criteria such as name, brand, city, country or amenities. The result is a summary of hotel information.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully found hotels",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(type = "array", implementation = HotelBriefDto.class))),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/search")
    public ResponseEntity<List<HotelBriefDto>> searchHotels(
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String brand,
            @RequestParam(required = false) String city,
            @RequestParam(required = false) String county,
            @RequestParam(required = false) String amenities) {
        List<HotelBriefDto> hotels = hotelService.searchHotels(name, brand, city, county, amenities);
        return ResponseEntity.ok(hotels);
    }

    @Operation(summary = "Create a new hotel",
            description = "Creates a new hotel with the specified data and returns its brief information. The ID is generated by the server.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "The hotel has been successfully established",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = HotelBriefDto.class))),
            @ApiResponse(responseCode = "400", description = "Incorrect request or incorrect data"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @PostMapping("/hotels")
    public ResponseEntity<HotelBriefDto> createHotel(@RequestBody HotelCreateRequestDto requestDto) {
        HotelBriefDto createdHotel = hotelService.createHotel(requestDto);
        return ResponseEntity
                .created(URI.create("/property-view/hotels/" + createdHotel.getId()))
                .body(createdHotel);
    }

    @Operation(summary = "Add amenities to the hotel",
            description = "Adds one or more amenities to an existing hotel by hotel ID. Returns updated detailed information about the hotel.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Amenities have been successfully added",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = HotelDetailsDto.class))),
            @ApiResponse(responseCode = "404", description = "Hotel with the specified ID was not found"),
            @ApiResponse(responseCode = "400", description = "Incorrect request"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @PostMapping("/hotels/{id}/amenities")
    public ResponseEntity<HotelDetailsDto> addAmenitiesToHotel(
            @PathVariable Long id,
            @RequestBody List<String> amenities) {
        HotelDetailsDto updatedHotel = hotelService.addAmenitiesToHotel(id, amenities);
        return ResponseEntity.ok(updatedHotel);
    }

    @Operation(summary = "Get hotel histogram",
            description = "Returns the number of hotels grouped by the specified parameter (brand, city, country/region or amenities).")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "A histogram was successfully obtained",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(type = "object", example = "{\"Marriott\": 5, \"Warsaw\": 3}"))),
            @ApiResponse(responseCode = "400", description = "Incorrect parameter for histogram. Valid values: brand, city, county, amenities."),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/histogram/{param}")
    public ResponseEntity<Map<String, Long>> getHistogram(@PathVariable String param) {
        Map<String, Long> histogram = hotelService.getHistogram(param);
        return ResponseEntity.ok(histogram);
    }

}
